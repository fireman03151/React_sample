{
  "name": "Basic JavaScript",
  "order": 0.006,
  "challenges": [
    {
      "_id":"bd7123c9c441eddfaeb4bdef",
      "name":"Welcome To Comments",
      "dashedName":"waypoint-welcome-to-comments",
      "difficulty":"9.98",
      "description":[
        "",
        "A comment is a very useful line of code that is not actually ran by the machine executing it. With this property comments are the perfect way of creating notes to yourself or anyone else who reads your code describing what the code does",
        "It's an extremely important part in writing good, efficient and maintainable code and a requirement by most employers",
        "Let's take a look at the two ways in which we can write a comment in JavaScript",
        "<code> //This is a comment </code>",
        "These comment out the entire line that they are on",
        "<code> /*This also is a comment*/ </code>",
        "These comment out everything in between <code> /* </code> and <code> */ </code>",
        "Try creating one of each now."
      ],
      "tests":[
        "assert(editor.getValue().match(/(\\/\\*)...../g), 'Make sure you have at least one \/\\* \\*\/ style comment that has at least five letters in it');",
        "assert(editor.getValue().match(/(\\*\\/)/g), 'Make sure that you  close the coment with a \\*\/');",
        "assert(editor.getValue().match(/(\\/\\/)...../g), 'Make sure that there is at least one \\/\\/ style comment with at least five letters in it');"
      ],
      "challengeSeed":[

      ],
      "challengeType": 1
    },
    {
      "_id": "bd7123c9c441eddfaeb5bdef",
      "name": "Unconditionally Loving Booleans",
      "dashedName": "waypoint-unconditionally-loving-booleans",
      "difficulty": "9.98001",
      "description": [
        "Return true",
        "A boolean is a type of variable that represents either true or false (Named after the British mathematician George Boole).",
        "Booleans are often the result of a function or a comparative operation, for example <code> 1==1 </code> is true whereas <code> 1==2 </code> is false.",
        "They are most commonly found inside <code> if </code> statements which we shall cover later",
        "For now Let's modify our <code> welcomeToBooleans </code> function so that it will return <code> true </code> instead of <code> false </code> when the run button is clicked"
      ],
      "tests": [
        "assert(typeof(welcomeToBooleans())=='boolean', 'The value returned by welcomeToBooleans() should be a boolean value. (true of false)');",
        "assert(welcomeToBooleans() == true, 'The value returned by welcomeToBooleans() should be true');"
      ],
      "challengeSeed": [
        "function welcomeToBooleans() {",
        "// Good luck!",
        "return false;",
        "}",
        "",
        "welcomeToBooleans();"
      ],
      "challengeType": 1
    },
    {
      "_id": "bd7123c9c443eddfaeb5bdef",
      "name": "Start Using Variables",
      "dashedName": "waypoint-start-using-variables",
      "difficulty": "9.9801",
      "description": [
        "",
        "Now, use the <code>var</code> keyword to create a <code>variable</code> called <code>myName</code>. Set its value to your name.",
        "<code>Variables</code> are used to store values.",
        "The name variable comes from the fact that it's value, varies!",
        "Now Let's create our first variable called myName and because it's a name let's make it a string!",
        "Be sure to use lowercase and uppercase letters properly. JavaScript variables are written in <code>camel case</code>. An example of camel case is: camelCase.",
        "Look at the <code>ourName</code> example if you get stuck."
      ],
      "tests": [
        "assert((function(){/**/if(typeof(myName) !== 'undefined' && typeof(myName) == 'string' && myName.length > 0){return(true);}else{return(false);}/**/})(), 'myName should be a string that contains at least one character in it');"
      ],
      "challengeSeed": [
        "// var ourName = \"Free Code Camp\";",
        "",
        "// You can ignore this.",
        "// We use this to show you the value of your variable in your output box.",
        "// We'll learn about functions soon.",
        "",
        "if(typeof(myName) !== 'undefined'){(function(v){return(v);})(myName);}"
      ],
      "challengeType": 1
    },
    {
      "_id": "bd7123c9c444eddfaeb5bdef",
      "name": "Define Your First and Last Name",
      "dashedName": "waypoint-define-your-first-and-last-name",
      "difficulty": "9.9802",
      "description": [
        "",
        "Programs will almost always have several different variables that are used to keep track of several different pieces of data",
        "We are now going to go and create two new variables <code> myFirstName </code> and <code> myLastName </code> that are strings",
        "You can assign these variables to be equal to your first and last names respectively."
      ],
      "tests": [
        "assert((function(){if(typeof(myFirstName) !== 'undefined' && typeof(myFirstName) == 'string' && myFirstName.length > 0){return(true);}else{return(false);}})(), 'myFirstName should be a string with a least one character in it');",
        "assert((function(){if(typeof(myLastName) !== 'undefined' && typeof(myLastName) == 'string' && myLastName.length > 0){return(true);}else{return(false);}})(), 'myLastName should be a string with a least one character in it');"
      ],
      "challengeSeed": [
        "// ourName = \"Free Code Camp\";",
        "// var ourFirstName = \"Free\";",
        "// var ourLastName = \"Code Camp\";",
        "",
        "",
        "// You can ignore this.",
        "// We use this to show you the value of your variable in your output box.",
        "// We'll learn about functions soon.",
        "if(typeof(myFirstName) !== 'undefined' && typeof(myLastName) !== 'undefined'){(function(y,z){return(y + ', ' + z);})(myFirstName, myLastName);}"
      ],
      "challengeType": 1
    },
    {
      "_id": "bd7123c9c448eddfaeb5bdef",
      "name": "Check the Length Property of a String Variable",
      "dashedName": "waypoint-check-the-length-property-of-a-string-variable",
      "difficulty": "9.9809",
      "description": [
        "",
        "Use the <code>.length</code> property to count the number of characters in the <code>lastNameLength</code> variable.",
        "For example, if we created a variable <code>var firstName = \"Julie\"</code>, we could find out how long the string \"Julie\" is by using the <code>firstName.length</code> property."
      ],
      "tests": [
        "(function(){if(typeof(lastNameLength) != 'undefined' && typeof(lastNameLength) == 'number' && lastNameLength == 4){return(true);}else}{return(false);}}, 'lastNameLength should be equal to four')()"
      ],
      "challengeSeed": [
        "var firstName = \"Madeline\";",
        "",
        "var firstNameLength = firstName.length;",
        "",
        "var lastName = \"Chen\";",
        "",
        "var lastNameLength = lastName;",
        "",
        "",
        "",
        "// You can ignore this.",
        "// We use this to show you the value of your variable in your output box.",
        "// We'll learn about functions soon.",
        "if(typeof(lastNameLength) != 'undefined')(function(v){return(v);})(lastNameLength);}"
      ],
      "challengeType": 1
    },
    {
      "_id": "bd7123c9c549eddfaeb5bdef",
      "name": "Use Bracket Notation to Find the First Character in a String",
      "dashedName": "waypoint-use-bracket-notation-to-find-the-first-character-in-a-string",
      "difficulty": "9.9810",
      "description": [
        "Use <code>bracket notation</code> to find the first character in a the <code>firstLetterOfLastName</code> variable.",
        "<code>Bracket notation</code> is a way to get a character at a specific <code>index</code> within a string.",
        "Computers don't start counting at 1 like humans do. They start at 0.",
        "For example, the character at index 0 in the word \"Julie\" is \"J\". So if <code>var firstName = \"Julie\"</code>, you can get the value of the first letter of the string by using <code>firstName[0]</code>.",
        "Try looking at the <code>firstLetterOfFirstName</code> variable declaration if you get stuck."
      ],
      "tests": [
        "assert((function(){if(typeof(firstLetterOfLastName) != 'undefined' && typeof(firstLetterOfLastName) == 'string' && firstLetterOfLastName == 'C'){return(true);}else{return(false);}})(), 'The first letter of firstLetterOfLastName should be a C');"
      ],
      "challengeSeed": [
        "var firstName = \"Madeline\";",
        "",
        "var firstLetterOfFirstName = firstName[0];",
        "",
        "var lastName = \"Chen\";",
        "",
        "var firstLetterOfLastName = lastName;",
        "",
        "",
        "// You can ignore this.",
        "// We use this to show you the value of your variable in your output box.",
        "// We'll learn about functions soon.",
        "(function(v){return(v);})(firstLetterOfLastName);"
      ],
      "challengeType": 1
    },
    {
      "_id": "bd7123c9c450eddfaeb5bdef",
      "name": "Use Bracket Notation to Find the Nth Character in a String",
      "dashedName": "waypoint-use-bracket-notation-to-find-the-nth-character-in-a-string",
      "difficulty": "9.9811",
      "description": [
        "Just like the last lesson where we used <code> Bracket Notation </code> to access the first letter we can use the same method to get the letters ar other positions",
        "Don't forget that computers start counting at 0 so the first letter is actually the zeroth one",
        "Let's now try to set <code> thirdLetterOfLastName </code> to equal the <code>third letter</code> of the <code> lastName </code> variable",
        "Try looking at the <code>secondLetterOfFirstName</code> variable declaration if you get stuck."
      ],
      "tests": [
        "assert(thirdLetterOfLastName == 'e', 'The third last letter of lastName should be an e');"
      ],
      "challengeSeed": [
        "var firstName = \"Madeline\";",
        "",
        "var secondLetterOfFirstName = firstName[1];",
        "",
        "var lastName = \"Chen\";",
        "",
        "var thirdLetterOfLastName = lastName;",
        "",
        "",
        "// You can ignore this.",
        "// We use this to show you the value of your variable in your output box.",
        "// We'll learn about functions soon.",
        "(function(v){return(v);})(thirdLetterOfLastName);"
      ],
      "challengeType": 1
    },
    {
      "_id": "bd7123c9c451eddfaeb5bdef",
      "name": "Use Bracket Notation to Find the Last Character in a String",
      "dashedName": "waypoint-use-bracket-notation-to-find-the-last-character-in-a-string",
      "difficulty": "9.9812",
      "description": [
        "Use <code>bracket notation</code> to find the last character in the <code>lastName</code> variable.",
        "For example, the character at index 0 in the word \"Julie\" is \"J\". So if <code>var firstName = \"Julie\"</code>, you can get the value of the first letter of the string by using <code>firstName[0]</code>.",
        "In order to get the last letter of a string, you can subtract one from the string's length.",
        "For example, if <code>var firstName = \"Julie\"</code>, you can get the value of the last letter of the string by using <code>firstName[firstName.length - 1]</code>.",
        "Try looking at the <code>lastLetterOfLastName</code> variable declaration if you get stuck."
      ],
      "tests": [
        "assert(lastLetterOfLastName == 'n', 'lastLetterOfLastName should be <code>n</code>');",
        "assert(editor.getValue().match(/\\.length/g), 'You have to use .length to get the last letter');"
      ],
      "challengeSeed": [
        "var firstName = \"Madeline\";",
        "",
        "var lastLetterOfFirstName = firstName[firstName.length - 1];",
        "",
        "var lastName = \"Chen\";",
        "",
        "var lastLetterOfLastName = lastName;",
        "",
        "",
        "(function(v){return(v);})(lastLetterOfLastName);"
      ],
      "challengeType": 1
    },
    {
      "_id": "bd7123c9c452eddfaeb5bdef",
      "name": "Use Bracket Notation to Find the Nth to Last Character in a String",
      "dashedName": "waypoint-use-bracket-notation-to-find-the-nth-to-last-character-in-a-string",
      "difficulty": "9.9813",
      "description": [
        "Use <code>bracket notation</code> to find the second-to-last character in the <code>lastName</code> variable.",
        "For example, the character at index 0 in the word \"Julie\" is \"J\". So if <code>var firstName = \"Julie\"</code>, you can get the value of the first letter of the string by using <code>firstName[0]</code>.",
        "In order to get the last letter of a string, you can subtract one from the string's length.",
        "For example, if <code>var firstName = \"Julie\"</code>, you can get the value of the third-to-last letter of the string by using <code>firstName[firstName.length - 3]</code>.",
        "Try looking at the <code>lastLetterOfLastName</code> variable declaration if you get stuck."
      ],
      "tests": [
        "assert(secondToLastLetterOfLastName == 'e', 'secondToLastLetterOfLastName should be e');",
        "assert(editor.getValue().match(/\\.length/g), 'You have to use .length to get the third last letter');"
      ],
      "challengeSeed": [
        "var firstName = \"Madeline\";",
        "",
        "var thirdToLastLetterOfFirstName = firstName[firstName.length - 2];",
        "",
        "var lastName = \"Chen\";",
        "",
        "var secondToLastLetterOfLastName = lastName;",
        "",
        "",
        "(function(v){return(v);})(secondToLastLetterOfLastName);"
      ],
      "challengeType": 1
    },
    {
      "_id": "bh1111c1c11feddfaeb3bdef",
      "name": "Magical Maths Addition",
      "dashedName": "waypoint-magical-maths-addition",
      "difficulty": "9.98141",
      "description": [
        "",
        "In JavaScript whole numbers (called integers) can be really easily to preform mathematical functions",
        "Let's try a few of the most commonly used ones now",
        "We use <code> + </code> for addition",
        "Replace the <code> 0 </code> with correct number to achieve the result in the comment."
      ],
      "tests": [
        "assert((function(){if(add == 20 && editor.getValue().match(/\\+/g)){return(true);}else{return(false);}})(), 'Add should be the result of a sum and be equal to 20');"
      ],
      "challengeSeed": [
        "var add = 10 + 0;//equals 20",
        "",
        "",
        "",
        "(function(z){return('add='+z);})(add);"
      ],
      "challengeType": 1
    },
    {
      "_id": "bh1111c1c11feddfaeb4bdef",
      "name": "Magical Maths Subtraction",
      "dashedName": "waypoint-magical-maths-subtraction",
      "difficulty": "9.98142",
      "description": [
        "",
        "In JavaScript whole numbers (called integers) can be really easily to preform mathematical functions",
        "Let's try a few of the most commonly used ones now",
        "We use <code> - </code> for subtraction",
        "Replace the <code> 0 </code> with correct number to achieve the result in the comment."
      ],
      "tests": [
        "assert((function(){if(subtract == 12 && editor.getValue().match(/\\-/g)){return(true);}else{return(false);}})(), 'Subtract should be the result of a sum and be equal to 12');"
      ],
      "challengeSeed": [
        "var subtract = 45 - 0;//equals 12",
        "",
        "",
        "",
        "(function(z){return('subtract='+z);})(subtract);"
      ],
      "challengeType": 1
    },
    {
      "_id": "bh1111c1c11feddfaeb5bdef",
      "name": "Magical Maths Multiplication",
      "dashedName": "waypoint-magical-maths-multiplication",
      "difficulty": "9.98143",
      "description": [
        "",
        "In JavaScript whole numbers (called integers) can be really easily to preform mathematical functions",
        "Let's try a few of the most commonly used ones now",
        "We use <code> * </code> for multiplication",
        "Replace the <code> 0 </code> with correct number to achieve the result in the comment."
      ],
      "tests": [
        "assert((function(){if(multiply == 80 && editor.getValue().match(/\\*/g)){return(true);}else{return(false);}})(), 'Multiply should be the result of a sum and be equal to 80');"
      ],
      "challengeSeed": [
        "var multiply = 8 * 0;//equals 80",
        "",
        "",
        "",
        "(function(z){return('multiply='+z);})(multiply);"
      ],
      "challengeType": 1
    },
    {
      "_id": "bh1111c1c11feddfaeb6bdef",
      "name": "Magical Maths Division",
      "dashedName": "waypoint-magical-maths-division",
      "difficulty": "9.9814",
      "description": [
        "",
        "In JavaScript whole numbers (called integers) can be really easily to preform mathematical functions",
        "Let's try a few of the most commonly used ones now",
        "We use <code> / </code> for division",
        "Replace the <code> 0 </code> with correct number to achieve the result in the comment."
      ],
      "tests": [
        "assert((function(){if(divide == 2 && editor.getValue().match(/\\//g)){return(true);}else{return(false);}})(), 'Divide should be the result of a sum and be equal to 2');"
      ],
      "challengeSeed": [
        "var divide = 66 / 0;//equals 2",
        "",
        "",
        "",
        "(function(z){return('divide='+z);})(divide);"
      ],
      "challengeType": 1
    },
    {
      "_id": "bh1111c1c11feddfaeb4bdef",
      "name": "Creating Decimals",
      "dashedName": "waypoint-creating-decimals",
      "difficulty": "9.9815",
      "description": [
        "",
        "in JavaScript we can can work with decimal numbers",
        "These decal numbers are known as floats.",
        "Let's create a float now called myFloat and give it a value"
      ],
      "tests": [
        "assert((function(){if(typeof(myFloat) != 'undefined' && typeof(myFloat) == 'number' && editor.getValue().match(/\\./g).length >=2){return(true);}else{return(false);}})(), 'myFloat should be a decimal point number');"
      ],
      "challengeSeed": [
        "//var ourFloat = 5.7",
        "//Create a number with a decimal point here called myFloat",
        "",
        "",
        "",
        "",
        "if(typeof(myFloat) != 'undefined'){(function(z){return(z);})(myFloat);}"
      ],
      "challengeType": 1
    },
    {
      "_id": "bd7993c9c69feddfaeb7bdef",
      "name": "Working With Decimals",
      "dashedName": "waypoint-working-with-decimals",
      "difficulty": "9.98151",
      "description": [
        "",
        "in JavaScript we can can work with decimal numbers",
        "These decal numbers are known as floats.",
        "Let's take a look at working with floats now"
      ],
      "tests": [
        "assert(multiply == 15, 'The result of multiply should be 3.75');",
        "assert(divide == 2.25, 'The result of divide should be 2.25');"
      ],
      "challengeSeed": [
        "var multiply = 3.75 * 0;//equals 15",
        "var divide = 9 / 0;//equals 2.25",
        "",
        "",
        "",
        "(function(y,z){return('multiply='+y+', divide='+z);})(multiply,divide);"
      ],
      "challengeType": 1
    },
    {
      "_id": "bd7993c9c69feddfaeb8bdef",
      "name": "An Array Of new Information",
      "dashedName": "waypoint-an-array-of-new-information",
      "difficulty": "9.9816",
      "description": [
        "",
        "In JavaScript we can store lists or collections of data in what are called arrays",
        "Arrays are distinguished by the <code> [ </code> and <code> ] </code> around the data. Each piece of data is separated be a <code> , </code>",
        "Now let's create a new array called <code> myArray </code> with a <code> string </code> and a <code> number </code> with a <code> , </code> separating each one",
        "Refer to the example if you get stuck",
        ""
      ],
      "tests": [
        "assert(typeof(myArray) == 'object', 'myArray should be an array');",
        "assert(typeof(myArray[0]) !== 'undefined' && typeof(myArray[0]) == 'string', 'The fist item in myArray should be a string');",
        "assert(typeof(myArray[1]) !== 'undefined' && typeof(myArray[1]) == 'number', 'The second item in myArray should be a number');"
      ],
      "challengeSeed": [
        "//var array = ['John', 23];",
        "",
        "var myArray = [];",
        "",
        "",
        "(function(z){return(z);})(myArray);"
      ],
      "challengeType": 1
    },
    {
      "_id":"bh1111c1c11feddfaeb7bdef",
      "name":"Nesting Arrays",
      "dashedName":"waypoint-nesting-arrays",
      "difficulty":"9.98161",
      "description":[
        "",
        "We are also able to create arrays within arrays. This technique is called <code>nesting</code>.",
        "Let's now go create a nested array called <code>myArray</code>"
      ],
      "tests":[
        "assert((function(){if(typeof(myArray) !== 'undefined' && typeof(myArray) === 'object' && typeof(myArray[0]) !== 'undefined' && typeof(myArray) === 'object'){return(true);}else{return(false);}})(), 'myArray should contain at least one array');"
      ],
      "challengeSeed":[
        "var myArray = [];",
        "",
        "",
        "if(typeof(myArray) !== 'undefined'){(function(){return(myArray);})();}"
      ],
      "challengeType": 1
    },
    {
      "_id":"bg9997c9c79feddfaeb9bdef",
      "name":"Accessing data with Indexes",
      "dashedName":"waypoint-accessing-data-with-indexes",
      "difficulty":"9.9817",
      "description":[
        "",
        "Once an array has been created we can access the data we have stored in them using indexes",
        "Indexes are written in the same way as bracket notation that we covered earlier",
        "Example:",
        "<code>",
        "var array = [1,2,3]",
        "array[0]//equals 1",
        "</code>",
        "Create a var called <code>data</code> and set it to equal the first value of <code>myArray</code>"
      ],
      "tests":[
        "assert((function(){if(typeof(myArray) != 'undefined' && typeof(data) != 'undefined' && myArray[0] == data){return(true);}else{return(false);}})(), 'the variable data should equal the first value of myArray');"
      ],
      "challengeSeed":[
        "//var ourArray = [1,2,3]",
        "//var ourData = ourArray[0]//equals 1",
        "",
        "var myArray = [1,2,3];",
        "",
        "",
        "",
        "if(typeof(myArray) != 'undefined' && typeof(data) != 'undefined'){(function(y,z){return('myArray = ' + JSON.stringify(y) + ', data = ' + JSON.stringify(z));})(myArray, data);}"
      ],
      "challengeType": 1
    },
    {
      "_id": "bg9994c9c69feddfaeb9bdef",
      "name": "Manipulating Arrays With pop()",
      "dashedName": "waypoint-manipulating-arrays-with-pop",
      "difficulty": "9.9818",
      "description": [
        "",
        "When and array has been defined we still have the ability to make changes to it afterwards",
        "One common way in which we can manipulate the data in an array is through <code> .pop() </code>",
        "<code> .pop() </code> is used to \"pop\" a value from the end of an array. We can retrieve this value by preforming the pop in a variable declaration.",
        "any type of variable can be \"popped\" from and array",
        "Let's try <code> .pop() </code> now"
      ],
      "tests": [
        "assert((function(d){if(d[0] == 'John' && d[1] == 23 && d[2] == undefined){return(true);}else{return(false);}})(myArray), 'myArray should only have the first two values left([\"John\", 23])');",
        "assert((function(d){if(d[0] == 'cat' && d[1] == 2 && d[2] == undefined){return(true);}else{return(false);}})(removed), 'myArray should only have the first two values left([\"cat\"], 2)');"
      ],
      "challengeSeed": [
        "//var numbers = [1,2,3];",
        "//console.log(numbers); //Gives [1,2,3]",
        "//var removed = numbers.pop();",
        "//console.log(numbers); //Gives [1,2]",
        "//console.log(removed); //Gives 3",
        "",
        "var myArray = ['John', 23, ['cat', 2]];",
        "var removed = _;//This should be ['cat', 2] and myArray should now be ['John', 23]",
        "",
        "",
        "(function(y, z){return('myArray = ' + JSON.stringify(y) + ' & removed = ' + JSON.stringify(z));})(myArray, removed);"
      ],
      "challengeType": 1
    },
    {
      "_id": "bg9995c9c69feddfaeb9bdef",
      "name": "Manipulating Arrays With push()",
      "dashedName": "waypoint-manipulating-arrays-with-push",
      "difficulty": "9.9818",
      "description": [
        "",
        "Now that we've learn how to <code> pop </code> things from the end of the array, we need to learn how to <code> push </code> stuff back to the end",
        "Let's take the code we had last time and <code> push </code> this value to the end: <code> ['dog', 3] </code>"
      ],
      "tests": [
        "assert((function(d){if(d[2] != undefined && d[0] == 'John' && d[1] == 23 && d[2][0] == 'dog' && d[2][1] == 3){return(true);}else{return(false);}})(myArray), 'myArray should only have the first two values left([\"John\", 23, [\"dog\", 3]])');"
      ],
      "challengeSeed": [
        "var myArray = ['John', 23, ['cat', 2]];",
        "var removed = myArray.pop();",
        "//Add a ['dog', 3] to the end of myArray using push",
        "",
        "",
        "(function(z){return('myArray = ' + JSON.stringify(z));})(myArray);"
      ],
      "challengeType": 1
    },
    {
      "_id": "bg9996c9c69feddfaeb9bdef",
      "name": "Manipulating Arrays With shift()",
      "dashedName": "waypoint-manipulating-arrays-with-shift",
      "difficulty": "9.9817",
      "description": [
        "",
        "Another common way in which we can manipulate the data in an array is through <code> .shift() </code>",
        "<code> .shift() </code> is used to \"shift\" a value from the start of an array. We can retrieve this value by preforming the shift in a variable declaration.",
        "Let's try <code> .shift() </code> now"
      ],
      "tests": [
        "assert((function(d){if(d[0] == 23 && d[1][0] == 'dog' && d[1][1] == 3 && d[2] == undefined){return(true);}else{return(false);}})(myArray), 'myArray should only have the first two values left([\"John\", 23])');",
        "assert((function(d){if(d == 'John'){return(true);}else{return(false);}})(removed), 'Removed should contain \"John\"');"
      ],
      "challengeSeed": [
        "var myArray = ['John', 23, ['dog', 3]];",
        "var removed = _;//This should be ['John'] and myArray should now be ['John', 23]",
        "",
        "",
        "(function(y, z){return('myArray = ' + JSON.stringify(y) + ' & removed = ' + JSON.stringify(z));})(myArray, removed);"
      ],
      "challengeType": 1
    },
    {
      "_id": "bg9997c9c69feddfaeb9bdef",
      "name": "Manipulating Arrays With unshift()",
      "dashedName": "waypoint-manipulating-arrays-with-unshift",
      "difficulty": "9.9818",
      "description": [
        "",
        "Now that we've learned how to <code> shift </code> things from the start of the array, we need to learn how to <code> unshift </code> stuff back to the start",
        "Let's take the code we had last time and <code> unshift </code> this value to the end: <code> 'Paul' </code>"
      ],
      "tests": [
        "assert((function(d){if(d[0].toLowerCase() == 'paul' && d[1] == 23 && d[2][0] != undefined && d[2][0] == 'dog' && d[2][1] != undefined && d[2][1] == 3){return(true);}else{return(false);}})(myArray), 'myArray should now have [\"Paul\", 23, [\"dog\", 3]])');"
      ],
      "challengeSeed": [
        "var myArray = ['John', 23, ['dog', 3]];",
        "var removed = myArray.shift();//This should be 'John' and myArray should now be [23, ['dog', 3]]",
        "//Add 'Paul' to the start of myArray",
        "",
        "",
        "(function(y, z){return('myArray = ' + JSON.stringify(y));})(myArray);"
      ],
      "challengeType": 1
    },
    {
      "_id":"bg9997c9c89feddfaeb9bdef",
      "name":"Make it functional",
      "dashedName":"waypoint-make-it-functional",
      "difficulty":"9.9819",
      "description":[
        "",
        "In JavaScript we can divide up our code into separate and reusable parts called functions",
        "here's and example of a function",
        "<code>",
          "function funcitonName (one, two ,three){",
          "   /*Some Code*/",
          "}",
        "</code>",
        "our function can be called like this",
        "<code>functionName();</code>",
        "Let's try creating and calling a function now."
      ],
      "tests":[
        "assert(f==data);"
      ],
      "challengeSeed":[
        "//var ourData = 'function called!';",
        "//function ourFunction(ourData) {/*ourData is being passed to this function as an argument*/",
        "//return(data);",
        "//}",
        "",
        "var data = 'Function Called!';",
        "",
        "//Create a function called myFunction that takes data as an argument and returns it like the example above",
        "",
        "",
        "",
        "",
        "",
        "//Don't modify this!",
        "var f=myFunction(data);",
        "(function(){var f=myFunction(data);return(f);})('');"
      ],
      "challengeType": 1
    },
    {
      "_id":"bg9997c9c99feddfaeb9bdef",
      "name":"Doing things inside functions",
      "dashedName":"waypoint-doing-things-inside-functions",
      "difficulty":"9.982",
      "description":[
        "",
        "A function that takes the value you give it and returns it isn't very useful! So now let's get our functions to do something!",
        "Starting from where we were last time let's make our function revers whatever we give it by chaining <code> .split('') </code>, <code> .reverse() </code> and <code> .join('') </code>"
      ],
      "tests":[
        "assert(f==data.split('').reverse().join(''), 'myFunction should now return the reversed version of data (!dellaC noitcnuF)');"
      ],
      "challengeSeed":[
        "//You can reverse strings like this",
        "//var notReversed = 'String';",
        "//var reversed = notReversed.split('').reverse().join('');",
        "",
        "var data = 'Function Called!';",
        "",
        "function myFunction(data){",
        "   ",
        "   return(data);",
        "}",
        "",
        "",
        "",
        "//Don't modify this!",
        "var f=myFunction(data);",
        "(function(f){return(f);})(f);"
      ],
      "challengeType": 1
    },
    {
      "_id":"bg9997c9c99feddfaeb9bdef",
      "name":"Keeping In The Scope Of Things",
      "dashedName":"waypoint-keeping-in-the-scope-of-things",
      "difficulty":"9.9821",
      "description":[
        "",
        "All variables are contained in something called a <code> scope </code>.",
        "A Scope defines where are variable can be accessed.",
        "All variables created outside any functions exist in what is called the <code> global scope </code>",
        "All variables are container or are scope to inside that function.",
        "<code>",
        "var variable = 'Global Scope'",
        "function test(){",
        "   return(variable);",
        "}",
        "test();//Returns Global Scope",
        "",
        "function change(){",
        "   variable = 'test';",
        "   return(variable);",
        "}",
        "",
        "change();//Returns test",
        "variable //equals Global Scope",
        "",
        "</code>",
        "Let's give this a go!"
      ],
      "tests":[
        "assert(Global == access(Global), 'access should return your Global var');",
        "assert(Global != localChange(Global), 'localChange should return your Global var');"
      ],
      "challengeSeed":[
        "//Create Your global variable with any value here",
        "var Global = _;",
        "",
        "//Make access() return you global variable",
        "function access(){",
        "   ",
        "}",
        "",
        "access();",
        "",
        "//Pass you global variable into localChange and modify it within the function",
        "function localChange(){",
        "   ",
        "}",
        "",
        "//Don't forget to call localChange here and pass your global variable",
        "",
        "",
        "(function(x,y,z){return('access returns: ' + y(x) + ' & localChange returns: ' + z(x));})(Global, access, localChange);"
      ],
      "challengeType": 1
    },
    {
      "_id":"bg9998c9c99feddfaeb9bdef",
      "name":"I Object!",
      "dashedName":"waypoint-i-object",
      "difficulty":"9.9822",
      "description":[
        "",
        "A very important data type in javascript is the <code> Object </code>",
        "<code> Objects </code> a similar to <code> arrays </code> except that instead of using indexes to access and modify their data, Objects have what are called <code> properties </code>",
        "Here's a sample Object",
        "<code>",
        "var cat = {",
        "   \"name\": \"Whiskers\",",
        "   \"legs\": 4,",
        "   \"tails\": 1,",
        "   \"enemies\": [\"Water\", \"Dogs\"]",
        "};",
        "</code>",
        "Objects are useful for storing data in a structured way or in a way that represents a real world object like a cat.",
        "Let's try to make a Object that represents a dog called myDog!"

      ],
      "tests":[
        "assert((function(z){if(z.hasOwnProperty('name') && z.name != undefined && typeof(z.name) == 'string'){return(true);}else{return(false);}})(myDog), 'myDog should contain the property name and it should be a string');",
        "assert((function(z){if(z.hasOwnProperty('legs') && z.legs != undefined && typeof(z.legs) == 'number'){return(true);}else{return(false);}})(myDog), 'myDog should contain the property legs and it should be a number');",
        "assert((function(z){if(z.hasOwnProperty('tails') && z.tails != undefined && typeof(z.tails) == 'number'){return(true);}else{return(false);}})(myDog), 'myDog should contain the property tails and it should be a number');",
        "assert((function(z){if(z.hasOwnProperty('friends') && z.friends != undefined && Array.isArray(z.friends)){return(true);}else{return(false);}})(myDog), 'myDog should contain the property friends and it should be an array');"
      ],
      "challengeSeed":[
        "//var ourDog = {",
        "//   \"name\": \"Camper\"",
        "//   \"legs\": 4",
        "//   \"tails\": 1",
        "//   \"friends\": ['everything!']",
        "//};",
        "",
        "/* add the name(string), legs(number), tails(number) and friends(array) properties to myDog.",
        "You can set them to whatever you want!*/",
        "",
        "var myDog = {",
        "   ",
        "};",
        "",
        "(function(z){return(z);})(myDog);"
      ],
      "challengeType": 1
    },
    {
      "_id":"bg9999c9c99feddfaeb9bdef",
      "name":"Manipulating Objects",
      "dashedName":"waypoint-manipulating-objects",
      "difficulty":"9.9823",
      "description":[
        "",
        "Now that we have an objects we need to know how to add and remove properties from it",
        "We add properties to objects like this",
        "<code>myObject['myProperty'] = \"myValue\";</code>",
        "They can also be deleted like this",
        "<code>delete(myObject[\"myProperty\"]);</code>",
        "Let's add the property bark",
        ""
      ],
      "tests":[
        "assert(myDog.bark != undefined, 'The property tails should have been deleted');",
        "assert(myDog.tails == undefined, 'The property tails should have been deleted');"
      ],
      "challengeSeed":[
        "//var ourDog = {",
        "//\"name\": \"Camper\"",
        "//\"legs\": 4",
        "//\"tails\": 1",
        "//\"friends\": [\"everything!\"]",
        "//};",
        "",
        "//Re-create myDog",
        "",
        "var myDog = {",
        "   \"name\": _,",
        "   \"legs\": _,",
        "   \"tails\": _,",
        "   \"friends\": []",
        "};",
        "",
        "//Let's add the property age to myDog",
        "",
        "",
        "//Now delete the property tails",
        "",
        "",
        "(function(z){return(z);})(myDog);"
      ],
      "challengeType": 1
    },
    {
      "_id":"bh1111c1c11feddfaeb5bdef",
      "name":"Looping with for",
      "dashedName":"waypoint-looping-with-for",
      "difficulty":"9.9824",
      "description":[
        "",
        "Loops are a critical part of any program! The next few challenges",
        "first we will be taking a look at the for loop",
        "<code>",
        "var ourArray = [];",
        "for(var i = 0; i < 5; i++){",
        "   ourArray.push(i);",
        "}",
        "</code>",
        "ourArray now contains [0,1,2,3,4] ",
        "Let's try getting a for loop to work by pushing values to an array"
      ],
      "tests":[
        "assert(editor.getValue().match(/for\\(/g), 'You should be using a for loop for this!');",
        "assert.deepEqual(myArray, [0,1,2,3,4], 'myArray should equal [0,1,2,3,4]');"
      ],
      "challengeSeed":[
        "var myArray = [];",
        "//Push the numbers 0-4 to myArray",
        "",
        ""
      ],
      "challengeType": 1
    },
    {
      "_id":"bh1111c1c11feddfaeb1bdef",
      "name":"Looping with while",
      "dashedName":"waypoint-looping-with-while",
      "difficulty":"9.9825",
      "description":[
        "",
        "Loops are a critical part of any program! The next few challenges",
        "first we will be taking a look at the for loop",
        "<code>",
        "var ourArray = [];",
        "var i = 0;",
        "while(i < 5){",
        "   ourArray.push(i);",
        "   i++;",
        "}",
        "</code>",
        "Let's try getting a for loop to work by pushing values to an array"
      ],
      "tests":[
        "assert(editor.getValue().match(/while\\(/g), 'You should be using a while loop for this!');",
        "assert.deepEqual(myArray, [0,1,2,3,4], 'myArray should equal [0,1,2,3,4]');"
      ],
      "challengeSeed":[
        "var myArray = [];",
        "//Push the numbers 0-4 to myArray",
        "",
        ""
      ],
      "challengeType": 1
    },
    {
      "_id":"bh1111c1c11feddfaeb2bdef",
      "name":"Looping with do while",
      "dashedName":"waypoint-looping-with-do-while",
      "difficulty":"9.9826",
      "description":[
        "",
        "Let's now take a look at the do - while loop",
        "<code>",
        "var ourArray = [];",
        "var i = 0;",
        "do{",
        "   ourArray.push(i);",
        "   i++;",
        "}while(i<5);",
        "</code>",
        "A do - while has a very special difference when compared to the for and while loops. The do while loop is guaranteed to execute preform it's action once regardless of whether or not the condition inside the while is met!",
        "Let's try getting a do - while loop to work by pushing values to an array"
      ],
      "tests":[
        "assert.deepEqual(myArray, [0,1,2,3,4], 'myArray should equal [0,1,2,3,4]');",
        "assert((function(){if(editor.getValue().match(/do/g) && editor.getValue(/while/g).match()){return(true);}else{return(false);}})(), 'You should be using a do while loop for this!');"
      ],
      "challengeSeed":[
        "var myArray = [];",
        "//Push the numbers 0-4 to myArray",
        "",
        ""
      ],
      "challengeType": 1
    }
  ]
}
