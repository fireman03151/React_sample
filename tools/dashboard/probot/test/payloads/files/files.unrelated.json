[
    {
        "sha": "53d25622b620a1fdb5b58c68b54e35a42233b1f8",
        "filename": "curriculum/schema/challengeSchema.js",
        "status": "modified",
        "additions": 83,
        "deletions": 78,
        "changes": 161,
        "blob_url": "https://github.com/freeCodeCamp/freeCodeCamp/blob/3e3abdc74b526972dedeb4d704b55a503b388944/curriculum/schema/challengeSchema.js",
        "raw_url": "https://github.com/freeCodeCamp/freeCodeCamp/raw/3e3abdc74b526972dedeb4d704b55a503b388944/curriculum/schema/challengeSchema.js",
        "contents_url": "https://api.github.com/repos/freeCodeCamp/freeCodeCamp/contents/curriculum/schema/challengeSchema.js?ref=3e3abdc74b526972dedeb4d704b55a503b388944",
        "patch": "@@ -1,84 +1,89 @@\n const Joi = require('joi');\n Joi.objectId = require('joi-objectid')(Joi);\n-const path = require('path');\n-require('dotenv').config({ path: path.resolve(__dirname, '../../.env') });\n \n-const { LOCALE: lang = 'english' } = process.env;\n-\n-let schema = Joi.object().keys({\n-  block: Joi.string(),\n-  blockId: Joi.objectId(),\n-  challengeOrder: Joi.number(),\n-  challengeType: Joi.number()\n-    .min(0)\n-    .max(9)\n-    .required(),\n-  checksum: Joi.number(),\n-  dashedName: Joi.string(),\n-  description: Joi.string().required(),\n-  fileName: Joi.string(),\n-  files: Joi.array().items(\n-    Joi.object().keys({\n-      key: Joi.string(),\n-      ext: Joi.string(),\n-      name: Joi.string(),\n-      head: [Joi.array().items(Joi.string().allow('')), Joi.string().allow('')],\n-      tail: [Joi.array().items(Joi.string().allow('')), Joi.string().allow('')],\n-      contents: [\n-        Joi.array().items(Joi.string().allow('')),\n-        Joi.string().allow('')\n-      ]\n-    })\n-  ),\n-  guideUrl: Joi.string().uri({ scheme: 'https' }),\n-  videoUrl: Joi.string().allow(''),\n-  helpRoom: Joi.string(),\n-  id: Joi.objectId().required(),\n-  instructions: Joi.string().required(),\n-  isBeta: Joi.bool(),\n-  isComingSoon: Joi.bool(),\n-  isLocked: Joi.bool(),\n-  isPrivate: Joi.bool(),\n-  isRequired: Joi.bool(),\n-  name: Joi.string(),\n-  order: Joi.number(),\n-  required: Joi.array().items(\n-    Joi.object().keys({\n-      link: Joi.string(),\n-      raw: Joi.bool(),\n-      src: Joi.string(),\n-      crossDomain: Joi.bool()\n-    })\n-  ),\n-  solutions: Joi.array().items(Joi.string().optional()),\n-  superBlock: Joi.string(),\n-  superOrder: Joi.number(),\n-  suborder: Joi.number(),\n-  tests: Joi.array().items(\n-    // public challenges\n-    Joi.object().keys({\n-      text: Joi.string().required(),\n-      testString: Joi.string()\n-        .allow('')\n-        .required()\n-    }),\n-    // our tests used in certification verification\n-    Joi.object().keys({\n-      id: Joi.string().required(),\n-      title: Joi.string().required()\n-    })\n-  ),\n-  template: Joi.string().allow(''),\n-  time: Joi.string().allow(''),\n-  title: Joi.string().required()\n-});\n-\n-if (lang !== 'english') {\n-  schema = schema.append({\n-    localeTitle: Joi.string().required()\n+function getSchemaForLang(lang) {\n+  let schema = Joi.object().keys({\n+    block: Joi.string(),\n+    blockId: Joi.objectId(),\n+    challengeOrder: Joi.number(),\n+    challengeType: Joi.number()\n+      .min(0)\n+      .max(9)\n+      .required(),\n+    checksum: Joi.number(),\n+    dashedName: Joi.string(),\n+    description: Joi.string().required(),\n+    fileName: Joi.string(),\n+    files: Joi.array().items(\n+      Joi.object().keys({\n+        key: Joi.string(),\n+        ext: Joi.string(),\n+        name: Joi.string(),\n+        head: [\n+          Joi.array().items(Joi.string().allow('')),\n+          Joi.string().allow('')\n+        ],\n+        tail: [\n+          Joi.array().items(Joi.string().allow('')),\n+          Joi.string().allow('')\n+        ],\n+        contents: [\n+          Joi.array().items(Joi.string().allow('')),\n+          Joi.string().allow('')\n+        ]\n+      })\n+    ),\n+    guideUrl: Joi.string().uri({ scheme: 'https' }),\n+    videoUrl: Joi.string().allow(''),\n+    helpRoom: Joi.string(),\n+    id: Joi.objectId().required(),\n+    instructions: Joi.string().required(),\n+    isBeta: Joi.bool(),\n+    isComingSoon: Joi.bool(),\n+    isLocked: Joi.bool(),\n+    isPrivate: Joi.bool(),\n+    isRequired: Joi.bool(),\n+    name: Joi.string(),\n+    order: Joi.number(),\n+    required: Joi.array().items(\n+      Joi.object().keys({\n+        link: Joi.string(),\n+        raw: Joi.bool(),\n+        src: Joi.string(),\n+        crossDomain: Joi.bool()\n+      })\n+    ),\n+    solutions: Joi.array().items(Joi.string().optional()),\n+    superBlock: Joi.string(),\n+    superOrder: Joi.number(),\n+    suborder: Joi.number(),\n+    tests: Joi.array().items(\n+      // public challenges\n+      Joi.object().keys({\n+        text: Joi.string().required(),\n+        testString: Joi.string()\n+          .allow('')\n+          .required()\n+      }),\n+      // our tests used in certification verification\n+      Joi.object().keys({\n+        id: Joi.string().required(),\n+        title: Joi.string().required()\n+      })\n+    ),\n+    template: Joi.string().allow(''),\n+    time: Joi.string().allow(''),\n+    title: Joi.string().required()\n   });\n-}\n \n-exports.validateChallenge = function validateChallenge(challenge) {\n-  return Joi.validate(challenge, schema);\n+  if (lang !== 'english') {\n+    schema = schema.append({\n+      localeTitle: Joi.string().required()\n+    });\n+  }\n+  return schema;\n+}\n+exports.challengeSchemaValidator = lang => {\n+  const schema = getSchemaForLang(lang);\n+  return challenge => Joi.validate(challenge, schema);\n };"
    },
    {
        "sha": "648329aaa0ac1e052f5a9174d0ca6027b42c3a92",
        "filename": "curriculum/test/test-challenges.js",
        "status": "modified",
        "additions": 33,
        "deletions": 16,
        "changes": 49,
        "blob_url": "https://github.com/freeCodeCamp/freeCodeCamp/blob/3e3abdc74b526972dedeb4d704b55a503b388944/curriculum/test/test-challenges.js",
        "raw_url": "https://github.com/freeCodeCamp/freeCodeCamp/raw/3e3abdc74b526972dedeb4d704b55a503b388944/curriculum/test/test-challenges.js",
        "contents_url": "https://api.github.com/repos/freeCodeCamp/freeCodeCamp/contents/curriculum/test/test-challenges.js?ref=3e3abdc74b526972dedeb4d704b55a503b388944",
        "patch": "@@ -22,27 +22,27 @@ const { getChallengesForLang } = require('../getChallenges');\n \n const MongoIds = require('./utils/mongoIds');\n const ChallengeTitles = require('./utils/challengeTitles');\n-const { validateChallenge } = require('../schema/challengeSchema');\n+const { challengeSchemaValidator } = require('../schema/challengeSchema');\n const { challengeTypes } = require('../../client/utils/challengeTypes');\n \n-const { LOCALE: lang = 'english' } = process.env;\n+const { supportedLangs } = require('../utils');\n \n const oldRunnerFail = Mocha.Runner.prototype.fail;\n Mocha.Runner.prototype.fail = function(test, err) {\n-  if (err.stack && err instanceof AssertionError) {\n-    const assertIndex = err.message.indexOf(': expected');\n+  if (err instanceof AssertionError) {\n+    const errMessage = String(err.message || '');\n+    const assertIndex = errMessage.indexOf(': expected');\n     if (assertIndex !== -1) {\n-      err.message = err.message.slice(0, assertIndex);\n+      err.message = errMessage.slice(0, assertIndex);\n     }\n     // Don't show stacktrace for assertion errors.\n-    delete err.stack;\n+    if (err.stack) {\n+      delete err.stack;\n+    }\n   }\n   return oldRunnerFail.call(this, test, err);\n };\n \n-let mongoIds = new MongoIds();\n-let challengeTitles = new ChallengeTitles();\n-\n const { JSDOM } = jsdom;\n \n const babelOptions = {\n@@ -55,7 +55,23 @@ const jQueryScript = fs.readFileSync(\n   'utf8'\n );\n \n-(async function() {\n+runTests();\n+\n+async function runTests() {\n+  let testLangs = [...supportedLangs];\n+  if (process.env.TEST_CHALLENGES_FOR_LANGS) {\n+    const filterLangs = process.env.TEST_CHALLENGES_FOR_LANGS.split(',').map(\n+      lang => lang.trim().toLowerCase()\n+    );\n+    testLangs = testLangs.filter(lang => filterLangs.includes(lang));\n+  }\n+\n+  await Promise.all(testLangs.map(lang => populateTestsForLang(lang)));\n+\n+  run();\n+}\n+\n+async function populateTestsForLang(lang) {\n   const allChallenges = await getChallengesForLang(lang).then(curriculum =>\n     Object.keys(curriculum)\n       .map(key => curriculum[key].blocks)\n@@ -67,7 +83,11 @@ const jQueryScript = fs.readFileSync(\n       }, [])\n   );\n \n-  describe('Check challenges tests', async function() {\n+  const mongoIds = new MongoIds();\n+  const challengeTitles = new ChallengeTitles();\n+  const validateChallenge = challengeSchemaValidator(lang);\n+\n+  describe(`Check challenges (${lang})`, async function() {\n     before(async function() {\n       this.timeout(30000);\n       global.browser = await puppeteer.launch({ args: ['--no-sandbox'] });\n@@ -87,8 +107,7 @@ const jQueryScript = fs.readFileSync(\n         it('Common checks', function() {\n           const result = validateChallenge(challenge);\n           if (result.error) {\n-            console.log(result.value);\n-            throw new Error(result.error);\n+            throw new AssertionError(result.error);\n           }\n           const { id, title } = challenge;\n           mongoIds.check(id, title);\n@@ -208,9 +227,7 @@ const jQueryScript = fs.readFileSync(\n       });\n     });\n   });\n-\n-  run();\n-})();\n+}\n \n // Fake Deep Equal dependency\n const DeepEqual = (a, b) => JSON.stringify(a) === JSON.stringify(b);"
    },
    {
        "sha": "d8b52ff8ae6587f3701ca5f8bc5339981f1adde4",
        "filename": "curriculum/utils.js",
        "status": "modified",
        "additions": 9,
        "deletions": 1,
        "changes": 10,
        "blob_url": "https://github.com/freeCodeCamp/freeCodeCamp/blob/3e3abdc74b526972dedeb4d704b55a503b388944/curriculum/utils.js",
        "raw_url": "https://github.com/freeCodeCamp/freeCodeCamp/raw/3e3abdc74b526972dedeb4d704b55a503b388944/curriculum/utils.js",
        "contents_url": "https://api.github.com/repos/freeCodeCamp/freeCodeCamp/contents/curriculum/utils.js?ref=3e3abdc74b526972dedeb4d704b55a503b388944",
        "patch": "@@ -6,5 +6,13 @@ exports.dasherize = function dasherize(name) {\n     .replace(/\\:/g, '');\n };\n \n-const supportedLangs = ['english', 'spanish'];\n+const supportedLangs = [\n+  'arabic',\n+  'chinese',\n+  'english',\n+  'portuguese',\n+  'russian',\n+  'spanish'\n+];\n+\n exports.supportedLangs = supportedLangs;"
    },
    {
        "sha": "5e847f5188b3962ed7811ebae55c7099ee18940d",
        "filename": "sample.env",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/freeCodeCamp/freeCodeCamp/blob/3e3abdc74b526972dedeb4d704b55a503b388944/sample.env",
        "raw_url": "https://github.com/freeCodeCamp/freeCodeCamp/raw/3e3abdc74b526972dedeb4d704b55a503b388944/sample.env",
        "contents_url": "https://api.github.com/repos/freeCodeCamp/freeCodeCamp/contents/sample.env?ref=3e3abdc74b526972dedeb4d704b55a503b388944",
        "patch": "@@ -28,3 +28,5 @@ API_LOCATION='http://localhost:3000'\n FORUM_LOCATION='https://forum.localhost'\n FORUM_PROXY_LOCATION='https://proxy.localhost'\n LOCALE=english\n+\n+TEST_CHALLENGES_FOR_LANGS=english"
    }
]